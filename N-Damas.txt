#include <iostream>
using namespace std;

const int N = 8; // Cambia este valor si quieres probar con otro tamaño
bool tablero[N][N]; // Tablero inicial

// Función para mostrar el tablero
void mostrarTablero() {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << (tablero[i][j] ? " Q " : " . ");
        }
        cout << endl;
    }
    cout << endl;
}

// Verifica si es seguro colocar una reina en la posición (fila, columna)
bool esSeguro(int fila, int col) {
    int i, j;

    // Revisar fila
    for (i = 0; i < col; i++)
        if (tablero[fila][i])
            return false;

    // Revisar diagonal superior izquierda
    for (i = fila, j = col; i >= 0 && j >= 0; i--, j--)
        if (tablero[i][j])
            return false;

    // Revisar diagonal inferior izquierda
    for (i = fila, j = col; i < N && j >= 0; i++, j--)
        if (tablero[i][j])
            return false;

    return true;
}

// Resolver con backtracking
bool resolverReinas(int col) {
    if (col >= N) {
        return true; // Todas las reinas están puestas
    }

    for (int fila = 0; fila < N; fila++) {
        if (esSeguro(fila, col)) {
            tablero[fila][col] = true; // Colocar reina

            if (resolverReinas(col + 1)) {
                return true;
            }

            tablero[fila][col] = false; // Backtracking
        }
    }

    return false; // No hay solución en esta rama
}

int main() {
    // Inicializar tablero vacío
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            tablero[i][j] = false;

    // Resolver desde la primera columna
    if (resolverReinas(0)) {
        cout << "Solución encontrada:\n";
        mostrarTablero();
    } else {
        cout << "No hay solución para N = " << N << endl;
    }

    return 0;
}
